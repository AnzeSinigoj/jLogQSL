/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package source.EditingForms;

import java.awt.Component;
import java.io.File;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.HashSet;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import source.DatabaseTools;
import source.Main;
import static source.Main.DBpathPublic;
import static source.Main.UserInput;

/**
 *
 * @author anze
 */
public class EditModes extends javax.swing.JFrame {

    public DatabaseTools dbt = new DatabaseTools();
    String[][] originalData = new String[0][0];

    public void resizeColumnWidths(JTable table) {
        for (int col = 0; col < table.getColumnCount(); col++) {
            int maxWidth = 50;

            TableColumn column = table.getColumnModel().getColumn(col);
            TableCellRenderer headerRenderer = column.getHeaderRenderer();
            if (headerRenderer == null) {
                headerRenderer = table.getTableHeader().getDefaultRenderer();
            }
            Component headerComp = headerRenderer.getTableCellRendererComponent(table, column.getHeaderValue(), false, false, -1, col);
            maxWidth = Math.max(maxWidth, headerComp.getPreferredSize().width + 10);

            for (int row = 0; row < table.getRowCount(); row++) {
                TableCellRenderer cellRenderer = table.getCellRenderer(row, col);
                Component comp = table.prepareRenderer(cellRenderer, row, col);
                maxWidth = Math.max(maxWidth, comp.getPreferredSize().width + 10);
            }

            column.setPreferredWidth(maxWidth);
        }
    }

    public static String[][] copyTable(JTable table) {
        int rowC = table.getRowCount(), colC = table.getColumnCount();
        String[][] data = new String[rowC][colC];
        for (int i = 0; i < rowC; i++) {
            for (int j = 0; j < colC; j++) {
                Object cellValue = table.getValueAt(i, j);
                data[i][j] = (cellValue == null) ? null : cellValue.toString();
            }
        }
        return data;
    }

    /**
     * Creates new form ViewLog
     */
    public EditModes() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jOptionPane1 = new javax.swing.JOptionPane();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Editing modes");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 51, 51));
        jButton1.setText("Close");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton2.setText("Refresh");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton3.setForeground(new java.awt.Color(51, 204, 0));
        jButton3.setText("Save");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 51, 51));
        jButton4.setText("Delete row");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addGap(5, 5, 5)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        //Reset table
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        model.setRowCount(0);
        //Make table grow in size if column widths are adjusted
        jTable2.setAutoResizeMode(jTable2.AUTO_RESIZE_OFF);
        String sql_call = "select id AS ID, name AS NAME, description AS DESCRIPTION from modes;";
        dbt.fillTableFromQuery(jTable2, Main.DBpathPublic, sql_call, jOptionPane1);
        resizeColumnWidths(jTable2);
        originalData = copyTable(jTable2);
    }//GEN-LAST:event_formWindowOpened

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        model.setRowCount(0);
        String sql_call = "select id AS ID, name AS NAME, description AS DESCRIPTION from modes;";
        dbt.fillTableFromQuery(jTable2, Main.DBpathPublic, sql_call, jOptionPane1);
        resizeColumnWidths(jTable2);
        originalData = copyTable(jTable2);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        int selected = jTable2.getSelectedRowCount();
        if (selected < 1) {
            jOptionPane1.showMessageDialog(null, "No selected rows.", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (selected == 1) {

            int row_selected = jTable2.getSelectedRow();
            String sql = "DELETE FROM modes WHERE id = ?";

            try (java.sql.Connection DBcon = dbt.connectToDB(new File(Main.DBpathPublic))) {
                PreparedStatement pstmt = DBcon.prepareStatement(sql);
                pstmt.setObject(1, jTable2.getValueAt(row_selected, 0));
                pstmt.executeUpdate();
                jButton2.doClick();
                jOptionPane1.showMessageDialog(null, "Row deleted.", "Success", JOptionPane.INFORMATION_MESSAGE);
            } catch (SQLException e) {
                jOptionPane1.showMessageDialog(null, "Failed to write to database.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {

            int success = 0, error = 0;
            int rows_selected[] = jTable2.getSelectedRows();

            try (java.sql.Connection DBcon = dbt.connectToDB(new File(Main.DBpathPublic))) {
                for (int row_selected : rows_selected) {
                    String sql = "DELETE FROM modes WHERE id = ?";

                    try {
                        PreparedStatement pstmt = DBcon.prepareStatement(sql);
                        pstmt.setObject(1, jTable2.getValueAt(row_selected, 0));
                        pstmt.executeUpdate();
                        success++;
                    } catch (SQLException e) {
                        error++;
                    }
                }
            } catch (SQLException e) {
                jOptionPane1.showMessageDialog(null, "Failed to connect to database.", "Error", JOptionPane.ERROR_MESSAGE);
            }

            jButton2.doClick();
            if (success == 0) {
                jOptionPane1.showMessageDialog(null, "Database error.\nNo rows deleted.", "Error", JOptionPane.ERROR_MESSAGE);
            } else if (error > 0) {
                jOptionPane1.showMessageDialog(null, "Rows deleted: " + success + "\nErrors encountered: " + error + ".", "Warning", JOptionPane.WARNING_MESSAGE);
            } else {
                jOptionPane1.showMessageDialog(null, "Rows deleted: " + success, "Success", JOptionPane.INFORMATION_MESSAGE);
            }

        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String[][] modifiedData = copyTable(jTable2);
        HashSet<String[]> modifiedRows = new HashSet<>();

        //Store the modified rows in a HashSet to avoid dupes
        for (int i = 0; i < originalData.length; i++) {
            for (int j = 0; j < originalData[0].length; j++) {
                if (originalData[i][j] != modifiedData[i][j]) {
                    modifiedRows.add(modifiedData[i]);
                }
            }
        }

        String sql = "UPDATE modes "
                + "SET "
                + "name = ?, "
                + "description = ? "
                + "WHERE id = ?; ";
        try (Connection DBcon = dbt.connectToDB(new File(DBpathPublic)); PreparedStatement pstmt = DBcon.prepareStatement(sql)) {
            for (String[] row : modifiedRows) {
                pstmt.setString(1, row[1]);
                pstmt.setString(2, row[2]);
                pstmt.setString(3, row[0]);
                pstmt.executeUpdate();
            }
            jOptionPane1.showMessageDialog(null, "Successfully saved the modified data.", "Success", JOptionPane.INFORMATION_MESSAGE);
            this.dispose();
        } catch (SQLException e) {
            jOptionPane1.showMessageDialog(null, "Failed to write to database.", "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
 
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditModes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditModes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditModes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditModes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditModes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JOptionPane jOptionPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
}
