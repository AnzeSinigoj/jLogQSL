/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package source.EditingForms;

import java.awt.Component;
import java.io.File;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import source.AddingForms.AddBand;
import source.AddingForms.AddMode;
import source.AddingForms.AddQTH;
import source.DatabaseTools;
import source.Main;

/**
 *
 * @author anze
 */
public class EditLog extends javax.swing.JFrame {

    public DatabaseTools dbt = new DatabaseTools();
    String[][] originalData = new String[0][0];

    public void resizeColumnWidths(JTable table) {
        for (int col = 0; col < table.getColumnCount(); col++) {
            int maxWidth = 50;

            TableColumn column = table.getColumnModel().getColumn(col);
            TableCellRenderer headerRenderer = column.getHeaderRenderer();
            if (headerRenderer == null) {
                headerRenderer = table.getTableHeader().getDefaultRenderer();
            }
            Component headerComp = headerRenderer.getTableCellRendererComponent(table, column.getHeaderValue(), false, false, -1, col);
            maxWidth = Math.max(maxWidth, headerComp.getPreferredSize().width + 10);

            for (int row = 0; row < table.getRowCount(); row++) {
                TableCellRenderer cellRenderer = table.getCellRenderer(row, col);
                Component comp = table.prepareRenderer(cellRenderer, row, col);
                maxWidth = Math.max(maxWidth, comp.getPreferredSize().width + 10);
            }

            column.setPreferredWidth(maxWidth);
        }
    }

    public static String[][] copyTable(JTable table) {
        int rowC = table.getRowCount(), colC = table.getColumnCount();
        String[][] data = new String[rowC][colC];
        for (int i = 0; i < rowC; i++) {
            for (int j = 0; j < colC; j++) {
                Object cellValue = table.getValueAt(i, j);
                data[i][j] = (cellValue == null) ? null : cellValue.toString();
            }
        }
        return data;
    }

    public boolean databaseChoise(String msg, JPanel window) {
        int result = JOptionPane.showConfirmDialog(
                null,
                msg,
                "Confirm",
                JOptionPane.YES_NO_OPTION
        );

        if (result == JOptionPane.YES_OPTION) {
            dbt.showPanelAndWait(window, "Add entry");
            return false;
        } else {
            jOptionPane1.showMessageDialog(null, "Field will not be changed in the database.", "Info", JOptionPane.INFORMATION_MESSAGE);
            return true;
        }
    }

    /**
     * Creates new form ViewLog
     */
    public EditLog() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jOptionPane1 = new javax.swing.JOptionPane();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Editing log");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 51, 51));
        jButton1.setText("Close");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton2.setText("Refresh");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton3.setForeground(new java.awt.Color(51, 204, 0));
        jButton3.setText("Save");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 51, 51));
        jButton4.setText("Delete row");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1352, Short.MAX_VALUE)
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 606, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        //Reset table
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        model.setRowCount(0);
        //Make table grow in size if column widths are adjusted
        jTable2.setAutoResizeMode(jTable2.AUTO_RESIZE_OFF);
        String sql_call = "SELECT L.ID AS ID, L.callsign AS CALLSIGN, L.date AS 'DATE & TIME', L.sent_report AS 'SENT REPORT', L.received_report AS 'RECEIVED REPORT', "
                + "B.name AS BAND, M.name AS MODE, L.power AS POWER, L.frequency AS FREQUENCY, L.qth AS QTH, Q.name AS 'MY QTH', L.note AS NOTE "
                + "FROM log_entries L "
                + "LEFT JOIN modes M ON M.id = L.modes_id "
                + "LEFT JOIN BANDS B ON B.id = L.bands_id "
                + "LEFT JOIN custom_qths Q ON Q.id = L.custom_qths_id";
        dbt.fillTableFromQuery(jTable2, Main.DBpathPublic, sql_call, jOptionPane1);
        originalData = copyTable(jTable2);
        resizeColumnWidths(jTable2);
    }//GEN-LAST:event_formWindowOpened

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        model.setRowCount(0);
        String sql_call = "SELECT L.ID AS ID, L.callsign AS CALLSIGN, L.date AS 'DATE & TIME', L.sent_report AS 'SENT REPORT', L.received_report AS 'RECEIVED REPORT', "
                + "B.name AS BAND, M.name AS MODE, L.power AS POWER, L.frequency AS FREQUENCY, L.qth AS QTH, Q.name AS 'MY QTH', L.note AS NOTE "
                + "FROM log_entries L "
                + "LEFT JOIN modes M ON M.id = L.modes_id "
                + "LEFT JOIN BANDS B ON B.id = L.bands_id "
                + "LEFT JOIN custom_qths Q ON Q.id = L.custom_qths_id";
        dbt.fillTableFromQuery(jTable2, Main.DBpathPublic, sql_call, jOptionPane1);
        originalData = copyTable(jTable2);
        resizeColumnWidths(jTable2);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        int selected = jTable2.getSelectedRowCount();
        if (selected < 1) {
            jOptionPane1.showMessageDialog(null, "No selected rows.", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (selected == 1) {

            int row_selected = jTable2.getSelectedRow();
            String sql = "DELETE FROM log_entries WHERE id = ?";

            try (java.sql.Connection DBcon = dbt.connectToDB(new File(Main.DBpathPublic))) {
                PreparedStatement pstmt = DBcon.prepareStatement(sql);
                pstmt.setObject(1, jTable2.getValueAt(row_selected, 0));
                pstmt.executeUpdate();
                jButton2.doClick();
                jOptionPane1.showMessageDialog(null, "Row deleted.", "Success", JOptionPane.INFORMATION_MESSAGE);
            } catch (SQLException e) {
                jOptionPane1.showMessageDialog(null, "Failed to write to database.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {

            int success = 0, error = 0;
            int rows_selected[] = jTable2.getSelectedRows();

            try (java.sql.Connection DBcon = dbt.connectToDB(new File(Main.DBpathPublic))) {
                for (int row_selected : rows_selected) {
                    String sql = "DELETE FROM log_entries WHERE id = ?";

                    try {
                        PreparedStatement pstmt = DBcon.prepareStatement(sql);
                        pstmt.setObject(1, jTable2.getValueAt(row_selected, 0));
                        pstmt.executeUpdate();
                        success++;
                    } catch (SQLException e) {
                        error++;
                    }
                }
            } catch (SQLException e) {
                jOptionPane1.showMessageDialog(null, "Failed to connect to database.", "Error", JOptionPane.ERROR_MESSAGE);
            }

            jButton2.doClick();
            if (success == 0) {
                jOptionPane1.showMessageDialog(null, "Database error.\nNo rows deleted.", "Error", JOptionPane.ERROR_MESSAGE);
            } else if (error > 0) {
                jOptionPane1.showMessageDialog(null, "Rows deleted: " + success + "\nErrors encountered: " + error + ".", "Warning", JOptionPane.WARNING_MESSAGE);
            } else {
                jOptionPane1.showMessageDialog(null, "Rows deleted: " + success, "Success", JOptionPane.INFORMATION_MESSAGE);
            }

        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String[][] modifiedData = copyTable(jTable2);
        ArrayList<String[]> modifiedRows = new ArrayList<>();

        for (int i = 0; i < originalData.length; i++) {
            for (int j = 0; j < originalData[i].length; j++) {
                if (originalData[i][j] == null) {
                    if (!(modifiedData[i][j] == null)) {
                        modifiedRows.add(modifiedData[i]);
                    }
                } else {
                    if (!(originalData[i][j].equals(modifiedData[i][j]))) {
                        modifiedRows.add(modifiedData[i]);
                    }
                }
            }
        }

        //Fixing FK references
        //Index 5 = band, 6 = mode, 10 = my_qth
        for (int i = 0; i < modifiedRows.size(); i++) {
            String[] arr = modifiedRows.get(i);

            String band = dbt.returnBandID(arr[5], Main.DBpathPublic, jOptionPane1);
            String mode = dbt.returnModeID(arr[6], Main.DBpathPublic, jOptionPane1);
            String qth = dbt.returnQthID(arr[10], Main.DBpathPublic, jOptionPane1);

            if (band.equals("-1")) {
                String msg = "Band \"" + arr[5] + "\" was not found in the database. Would you like to add it?";
                boolean isNull = databaseChoise(msg, new AddBand());

                if (isNull == true) {
                    arr[5] = originalData[i][5];
                }
            } else {
                arr[5] = band;
            }
            if (mode.equals("-1")) {
                String msg = "Mode \"" + arr[6] + "\" was not found in the database. Would you like to add it?";
                boolean isNull = databaseChoise(msg, new AddMode());

                if (isNull == true) {
                    arr[6] = originalData[i][6];
                }
            } else {
                arr[6] = mode;
            }
            if (qth.equals("-1")) {
                String msg = "QTH \"" + arr[10] + "\" was not found in the database. Would you like to add it?";
                boolean isNull = databaseChoise(msg, new AddQTH());

                if (isNull == true) {
                    arr[10] = originalData[i][6]; //Change so it can be left null
                }
            } else {
                arr[10] = qth;
            }
        }

        //Writing changes into the database
        for (String[] arr : modifiedRows) {
            /* id = 0
            * call = 1
            * date = 2
            * sent = 3
            * rcv = 4
            * band = 5
            * mode = 6
            * power = 7
            * freq = 8
            * qth = 9
            * custom qth = 10
            * note = 11
             */
            int id, band, mode, custom_qth, tmp;
            double power, tmp_double;

            //Converting into the right datatype
            id = requireInt(arr[0], "ID");
            band = requireInt(arr[5], "Band");
            mode = requireInt(arr[6], "Mode");
            custom_qth = requireInt(arr[10], "MY QTH");
            power = requireDouble(arr[7], "Power");

            dbt.updateDB(id, arr[1], arr[2], arr[3], arr[4], band, mode, power, arr[8], arr[9], custom_qth, arr[11], jOptionPane1, Main.DBpathPublic);

        }
    }//GEN-LAST:event_jButton3ActionPerformed
    
    public double convertToDouble(String number) {
        try {
            return Double.parseDouble(number);
        } catch (Exception e) {
            return -1.0;
        }
    }

    public int convertToInt(String number) {
        try {
            return Integer.parseInt(number);
        } catch (Exception e) {
            return -1;
        }
    }

    private int requireInt(String value, String fieldName) {
        int tmp = convertToInt(value);
        if (tmp == -1) {
            JOptionPane.showMessageDialog(null, fieldName + " is not a number", "Error", JOptionPane.ERROR_MESSAGE);
        }
        return tmp;
    }

    private double requireDouble(String value, String fieldName) {
        double tmp = convertToDouble(value);
        if (Double.isNaN(tmp)) {
            JOptionPane.showMessageDialog(null, fieldName + " is not a number", "Error", JOptionPane.ERROR_MESSAGE);
        }
        return tmp;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditLog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditLog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditLog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditLog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditLog().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JOptionPane jOptionPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
}
