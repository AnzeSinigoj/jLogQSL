/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package source.OtherUtilityForms;

import java.awt.Window;
import java.io.File;
import java.io.PrintWriter;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import source.DatabaseTools;
import source.Main;
import static source.OtherUtilityForms.DataEntry.folder;

/**
 *
 * @author anze
 */
public class ExportLog extends javax.swing.JPanel {

    DatabaseTools dbt = new DatabaseTools();
    static String path = new File("data" + File.separator + "jLogQSL_export.adi").getAbsolutePath();

    /**
     * Creates new form ExportLog
     */
    public ExportLog() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        jOptionPane1 = new javax.swing.JOptionPane();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 51, 51));
        jLabel5.setText("*");

        setToolTipText("Export log");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Choose export format:");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ADIF (.adi)", "ADIF (.log)", "CSV (.csv)", "TXT (.txt)", "PDF (.pdf)" }));
        jComboBox1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jComboBox1FocusGained(evt);
            }
        });
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Choose export path:");

        jButton1.setForeground(new java.awt.Color(102, 204, 255));
        jButton1.setText("Choose");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 51, 51));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("*");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 51, 51));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("*");

        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton2.setForeground(new java.awt.Color(51, 204, 0));
        jButton2.setText("Export");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 51, 51));
        jButton3.setText("Cancel");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        jLabel3.setText("Current path:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel6))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel7))))
                            .addComponent(jLabel3))
                        .addGap(0, 191, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jButton1)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    int id_len;
    int call_len;
    int date_len;
    int sent_len;
    int recv_len;
    int band_len;
    int mode_len;
    int power_len;
    int freq_len;
    int qth_len;
    int myqth_len;
    int note_len;
    int total_len;

    public int returnLongestColumnLength(String arr[][], int column_index) {
        int len = 0;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i][column_index] == null) {
                continue;
            }
            if (arr[i][column_index].length() > len) {
                len = arr[i][column_index].length();
            }

        }
        return len;
    }

    public String centerString(String text, int len) {
        if (text == null) {
            return " ".repeat(len);
        } else {
            int space_avalible = len - text.length();
            int l_pad = space_avalible / 2;
            int r_pad = space_avalible - l_pad;

            l_pad = (l_pad > 0) ? l_pad : l_pad * -1;
            r_pad = (r_pad > 0) ? r_pad : r_pad * -1;

            return " ".repeat(l_pad) + text + " ".repeat(r_pad);
        }
    }

    public String centerLeft(String text, int len) {
        if (text == null) {
            return " ".repeat(len);
        } else {
            int space_avalible = len - text.length();

            space_avalible = (space_avalible > 0) ? space_avalible : space_avalible * -1;

            return text + " ".repeat(space_avalible);
        }
    }

    public ArrayList subdivideNote(String note, int len) {
        note = (note == null) ? "" : note;
        note = note.replaceAll("[\\n\\r\\t]", "");
        ArrayList<String> tmp = new ArrayList<>();
        while (true) {
            if (note.length() <= len) {
                tmp.add(note);
                break;
            } else {
                if (note.charAt(len - 1) != ' ') {
                    tmp.add(note.substring(0, len - 1) + "-");
                    note = note.substring(len - 1);

                } else {
                    tmp.add(note.substring(0, len));
                    note = note.substring(len);
                }
            }
        }
        return tmp;
    }

    public int getLen(int index) {
        switch (index) {
            case 0:
                return id_len;
            case 1:
                return call_len;
            case 2:
                return date_len;
            case 3:
                return sent_len;
            case 4:
                return recv_len;
            case 5:
                return band_len;
            case 6:
                return mode_len;
            case 7:
                return power_len;
            case 8:
                return freq_len;
            case 9:
                return qth_len;
            case 10:
                return myqth_len;
            case 11:
                return note_len;
            default:
                return 0;
        }
    }

    public void exToADIF(PrintWriter pw, String[][] data) {
//        <field_name:length>value
//        <CALL:5>S52AB
//        <QSO_DATE:8>20250905
//        <TIME_ON:4>1230
//        <RST_SENT:2>59
//        <RST_RCVD:2>59
//        <BAND:3>20M
//        <MODE:3>SSB
//        <PWR:3>100
//        <FREQ:7>14.2500
//        <QTH:6>Ljublj
//        <MY_QTH:6>Maribor
//        <COMMENT:15>Worked during contest
//        <EOR>

        //Skip the first entry containing field names
        for (int i = 1; i < data.length; i++) {
            //Extracting values of date and time
            String[] split = data[i][2].split(" ");
            String date = split[0].replaceAll("-", "");
            String time =  split[1].replaceAll(":", "").substring(0,4);

            pw.print(returnAdifFormat(data[i][1], 1)); // CALLSIGN
            pw.print(returnAdifFormat(date, 2));       // DATE 
            pw.print(returnAdifFormat(time, 3));       // TIME
            pw.print(returnAdifFormat(data[i][3], 4)); // SENT REPORT
            pw.print(returnAdifFormat(data[i][4], 5)); // RECEIVED REPORT
            pw.print(returnAdifFormat(data[i][5], 6)); // BAND
            pw.print(returnAdifFormat(data[i][6], 7)); // MODE
            pw.print(returnAdifFormat(data[i][7], 8)); // POWER
            pw.print(returnAdifFormat(data[i][8], 9)); // FREQUENCY
            pw.print(returnAdifFormat(data[i][9], 10)); // QTH
            pw.print(returnAdifFormat("My QTH: " + data[i][10] + " Note: " + data[i][11], 11)); // MY QTH / NOTE
            pw.println("<EOR>");
        }
    }

    public String returnAdifFormat(String entry, int type) {
        //1 = call, 2 = date, 3 = time, 4 = sent, 5 received, 6 = band, 7 = mode, 8 = pwr, 9 = frewq, 10 = qth, 11 = note and myqth
        int len = (entry == null) ? 0 : entry.length();
        entry = (entry == null) ? "" : entry;
        entry = entry.replaceAll("[\\n\\r\\t]", " ");

        switch (type) {
            case 1:
                return "<CALL:" + len + ">" + entry;
            case 2:
                return "<QSO_DATE:" + len + ">" + entry;
            case 3:
                return "<TIME_ON:" + len + ">" + entry;
            case 4:
                return "<RST_SENT:" + len + ">" + entry;
            case 5:
                return "<RST_RCVD:" + len + ">" + entry;
            case 6:
                return "<BAND:" + len + ">" + entry;
            case 7:
                return "<MODE:" + len + ">" + entry;
            case 8:
                return "<PWR:" + len + ">" + entry;
            case 9:
                return "<FREQ:" + len + ">" + entry;
            case 10:
                return "<QTH:" + len + ">" + entry;
            case 11:
                return "<COMMENT:" + len + ">" + entry;
            default:
                return "";
        }

    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String sql_call = "SELECT L.ID AS ID, L.callsign AS CALLSIGN, L.date AS 'DATE & TIME', L.sent_report AS 'SENT REPORT', L.received_report AS 'RECEIVED REPORT', "
                + "B.name AS BAND, M.name AS MODE, L.power AS POWER, L.frequency AS FREQUENCY, L.qth AS QTH, Q.name AS 'MY QTH', L.note AS NOTE "
                + "FROM log_entries L "
                + "LEFT JOIN modes M ON M.id = L.modes_id "
                + "LEFT JOIN BANDS B ON B.id = L.bands_id "
                + "LEFT JOIN custom_qths Q ON Q.id = L.custom_qths_id";
        String[][] data = dbt.getArrayFromQuery(Main.DBpathPublic, sql_call, jOptionPane1);

        try {
            PrintWriter pw = new PrintWriter(new File(path));
            switch (jComboBox1.getSelectedIndex()) {
                case 0:
                    // ADIF (.adi)
                    exToADIF(pw, data);
                    pw.close();
                    break;
                case 1:
                    //ADIF (.log)
                    exToADIF(pw, data);
                    pw.close();
                    break;
                case 2:
                    //CSV (.csv)
                    for (int i = 0; i < data.length; i++) {
                        writeStringOrInt(pw, data[i][0], true);
                        for (int j = 1; j < data[i].length; j++) {
                            writeStringOrInt(pw, data[i][j], false);
                        }
                        pw.print("\n");
                    }
                    pw.close();
                    break;
                case 3:
                    //TXT (.txt)
                    //Assigning value
                    id_len = returnLongestColumnLength(data, 0) + 2;
                    call_len = returnLongestColumnLength(data, 1) + 2;
                    date_len = returnLongestColumnLength(data, 2) + 2;
                    sent_len = returnLongestColumnLength(data, 3) + 2;
                    recv_len = returnLongestColumnLength(data, 4) + 2;
                    band_len = returnLongestColumnLength(data, 5) + 2;
                    mode_len = returnLongestColumnLength(data, 6) + 2;
                    power_len = returnLongestColumnLength(data, 7) + 2;
                    freq_len = returnLongestColumnLength(data, 8) + 2;
                    qth_len = returnLongestColumnLength(data, 9) + 2;
                    myqth_len = returnLongestColumnLength(data, 10) + 2;
                    note_len = 50;
                    total_len = id_len + call_len + date_len + sent_len + recv_len + band_len + mode_len + power_len + freq_len + qth_len + myqth_len + note_len + data[0].length - 1;

                    //Write head pannel
                    pw.println("+" + "-".repeat(total_len) + "+");
                    pw.print("|");
                    for (int i = 0; i < data[0].length; i++) {
                        pw.print(centerString(data[0][i], getLen(i)) + "|");
                    }
                    pw.println("+" + "-".repeat(total_len) + "+");

                    for (int i = 1; i < data.length; i++) {
                        pw.print("|");
                        for (int j = 0; j < data[i].length - 1; j++) { //Exclude the note
                            pw.print(centerString(data[i][j], getLen(j)) + "|");
                        }
                        //Handle the note
                        ArrayList<String> note_chunks = subdivideNote(data[i][data.length], note_len - 1);
                        if (note_chunks.size() <= 1) {
                            pw.print(" " + centerLeft(data[i][data[i].length - 1], note_len - 1) + "|");
                        } else {
                            pw.println(" " + centerLeft(note_chunks.get(0), note_len - 1) + "|");
                            pw.print("| " + " ".repeat(total_len - note_len - 2));
                            for (int j = 1; j < note_chunks.size() - 1; j++) {
                                pw.println(" " + centerLeft(note_chunks.get(j), note_len) + "|");
                                pw.print("| " + " ".repeat(total_len - note_len - 2));
                            }
                            pw.print(" " + centerLeft(note_chunks.get(note_chunks.size() - 1), note_len) + "|");
                        }
                        pw.println();
                    }
                    pw.println("+" + "-".repeat(total_len) + "+"); //Print the last bar
                    pw.close();
                    break;
                case 4:
                    //PDF (.pdf)
                    break;
            }
            jOptionPane1.showMessageDialog(null, "Log successfully exported.", "Success.", JOptionPane.INFORMATION_MESSAGE);
            Window this_w = SwingUtilities.getWindowAncestor(this);
            if (this_w != null) {
                this_w.dispose();
            }
        } catch (Exception e) {
            jOptionPane1.showMessageDialog(null, "Export failed.", "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        Window this_w = SwingUtilities.getWindowAncestor(this);
        if (this_w != null) {
            this_w.dispose();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser picker = new JFileChooser();
        picker.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int result = picker.showOpenDialog(null);

        if (result == JFileChooser.APPROVE_OPTION) {
            folder = picker.getSelectedFile();
            path = folder.toString() + File.separator + "jLogQSL_export" + jComboBox1.getSelectedItem().toString().split("[()]")[1]; //Get the 2nd item of the array cuz i split per '('  
            jLabel3.setText("Current path: " + path);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        switch (jComboBox1.getSelectedIndex()) {
            case 0:
                // ADIF (.adi)
                changeFileExtention("adi");
                break;
            case 1:
                //ADIF (.log)
                changeFileExtention("log");
                break;
            case 2:
                //CSV (.csv)
                changeFileExtention("csv");
                break;
            case 3:
                //TXT (.txt)
                changeFileExtention("txt");
                break;
            case 4:
                //PDF (.pdf)
                changeFileExtention("pdf");
                break;
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jComboBox1FocusGained
        jLabel3.setText("Current path: " + path);
    }//GEN-LAST:event_jComboBox1FocusGained

    public void changeFileExtention(String newExtension) {
        String tmp[] = path.split("\\.");
        tmp[tmp.length - 1] = newExtension;
        path = String.join(".", tmp);
        jLabel3.setText("Current path: " + path);
    }

    public void writeStringOrInt(PrintWriter pw, String attribute, boolean isFirst) {
        if (attribute == null || attribute.isEmpty()) {
            if (!isFirst) {
                pw.print(",");
            }
            return;
        }
        try {
            int tmp = Integer.parseInt(attribute);
            if (isFirst) {
                pw.print(tmp);
            } else {
                pw.print("," + tmp);
            }
            return;
        } catch (NumberFormatException e) {
            // if not int, try double
        }

        try {
            double tmp = Double.parseDouble(attribute);
            if (isFirst) {
                pw.print(tmp);
            } else {
                pw.print("," + tmp);
            }
        } catch (NumberFormatException e) {
            if (isFirst) {
                pw.print("\"" + attribute.replace("\"", "\"\"").replace("\n", " ") + "\"");
            } else {
                pw.print(",\"" + attribute.replace("\"", "\"\"").replace("\n", " ") + "\"");
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JOptionPane jOptionPane1;
    // End of variables declaration//GEN-END:variables
}
